#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: #@ "{}-pvc".format(data.values.vm.name)
  namespace: #@ data.values.vm.namespace
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: #@ data.values.storage.pvc_size
  storageClassName: #@ data.values.storage.class_name
  volumeMode: Filesystem
---
apiVersion: vmoperator.vmware.com/v1alpha1
kind: VirtualMachine
metadata:
  labels:
    vm-selector: #@ "{}-vm".format(data.values.name)
  name: #@ "{}-vm".format(data.values.vm.name)
  namespace: #@ data.values.vm.namespace
spec:
  imageName: #@ data.values.vm.imagename
  className: #@ data.values.vm.classname
  powerState: poweredOn
  storageClass: #@ data.values.storage.class_name
  networkInterfaces:
  - networkType: #@ data.values.vm.network_type
    networkName: #@ data.values.vm.network_name
  volumes:
  - name: #@ "{}-vol".format(data.values.vm.name)
    persistentVolumeClaim:
      claimName: #@ "{}-pvc".format(data.values.vm.name)
  readinessProbe:
    tcpSocket:
      port: 22
  vmMetadata:
    configMapName: #@ "{}-cloudinit".format(data.values.vm.name)
    transport: OvfEnv
---
apiVersion: v1
kind: ConfigMap
metadata:
    name: #@ "{}-cloudinit".format(data.values.vm.name)
    namespace: #@ data.values.vm.namespace
data:
  user-data: #@ base64.encode(data.read("cloud-init.yaml.txt"))
  hostname: #@ "{}-vm".format(data.values.vm.name)
---
apiVersion: vmoperator.vmware.com/v1alpha1
kind: VirtualMachineService
metadata:
  name: #@ "{}-svc".format(data.values.vm.name)
  namespace: #@ data.values.vm.namespace
spec:
  ports:
  - name: ssh
    port: 22
    protocol: TCP
    targetPort: 22
  - name: secure
    port: 443
    protocol: TCP
    targetPort: 443
  - name: minio
    port: 9000
    protocol: TCP
    targetPort: 9000
  - name: console
    port: 9001
    protocol: TCP
    targetPort: 9001
  selector:
    vm-selector: #@ "{}-vm".format(data.values.vm.name)
  type: LoadBalancer
---

